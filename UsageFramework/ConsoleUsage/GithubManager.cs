using Octokit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleUsage
{
    internal class GithubManager
    {
        private readonly GitHubClient _client;

        public GithubManager()
        {
            _client = new GitHubClient(new ProductHeaderValue("asdasdasdf"));
            //var basicAuth = new Credentials("mehmetozkaya", "Tatg.Wp1");            
            _client.Credentials = new Credentials("937023546ae6a29c04972a94f712e00ea32ea120");
        }

        public async Task CommitAsync()
        {
            var owner = "mehmetozkaya";
            var repo = "UsageFramework";
            var branch = "master";

            // create file
            var createChangeSet = await _client.Repository.Content.CreateFile(
                                            owner,
                                            repo,
                                            "C:\\AMXPERU\\file.txt",
                                            new CreateFileRequest("File creation",
                                                                  "Hello World!",
                                                                  branch));

            // update file
            var updateChangeSet = await _client.Repository.Content.UpdateFile(
                                            owner,
                                            repo,
                                            "C:\\AMXPERU\\file.txt",
                                            new UpdateFileRequest("File update",
                                                                  "Hello Universe!",
                                                                  createChangeSet.Content.Sha,
                                                                  branch));

            // delete file
            await _client.Repository.Content.DeleteFile(
                                            owner,
                                            repo,
                                            "C:\\AMXPERU\\file.txt",
                                            new DeleteFileRequest("File deletion",
                                                                  updateChangeSet.Content.Sha,
                                                                  branch));
        }

        
        public async Task<User> GetUserInfo(string userName)
        {
            var user = await _client.User.Get(userName);
            return user;
        }

        public async Task<IReadOnlyList<Issue>> GetIssues()
        {
            var issues = await _client.Issue.GetAllForCurrent();
            return issues;
        }

        public async Task<IReadOnlyList<Issue>> GetIssuesForRepository(string userName, string repository)
        {
            var issuesFor = await _client.Issue.GetAllForRepository(userName, repository);
            return issuesFor;
        }

        public async Task<SearchRepositoryResult> GetRepository(string repositoryName)
        {            
            var request = new SearchRepositoriesRequest(repositoryName);
            var result = await _client.Search.SearchRepo(request);            
            return result;
        }

        public async Task<Issue> CreateIssue()
        {            
            var createIssue = new NewIssue("this issue generated by api");
            var issue = await _client.Issue.Create("mehmetozkaya", "UsageFramework", createIssue);
            return issue;
        }

        public async Task<Issue> UpdateIssue(int issueId)
        {
            var issue = await _client.Issue.Get("mehmetozkaya", "UsageFramework", issueId);            
            var update = issue.ToUpdate();
            update.Body = "Updated body of issue";
            update.Title = update.Title + " updated";

            var updatedIssue = await _client.Issue.Update("mehmetozkaya", "UsageFramework", issueId, update);
            return updatedIssue;
        }


        public void ApiInformation()
        {
            var apiInfo = _client.GetLastApiInfo();
            var rateLimit = apiInfo?.RateLimit;
            var howManyRequestsCanIMakePerHour = rateLimit?.Limit;
            var howManyRequestsDoIHaveLeft = rateLimit?.Remaining;
            var whenDoesTheLimitReset = rateLimit?.Reset; // UTC time
        }

        public Task<User> CurrentUser
        {
            get
            {
                return _client.User.Current();
            }
        }
    }
}
